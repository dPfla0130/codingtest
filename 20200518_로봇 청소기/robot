import sys
from collections import deque

#sys.stdin = open("input.txt", "rt")
n, m = map(int, input().split())
ar = list(map(int, input().split()))

r = ar[0]
c = ar[1]
d = ar[2]

board = [list(map(int, input().split())) for _ in range(n)]
chk = [[0]*m for _ in range(n)]

q = deque()
def direction(cd):
    #만약 현재 바라보는 방향이 북쪽이면 왼쪽 방향은
    if cd == 0:
        return [0, -1, 3]
    elif cd == 1:
        return [-1, 0, 0]
    elif cd == 2:
        return [0, 1, 1]
    else:
        return [1, 0, 2]

def current_direct(cd):
    if cd == 0:
        return 1
    elif cd == 1:
        return 2
    elif cd == 2:
        return 3
    else:
        return 0

def back(cd):
    if cd == 0:
        return [1, 0]
    elif cd == 1:
        return [0, -1]
    elif cd == 2:
        return [-1, 0]
    else:
        return [0, 1]

#cd는 current direction
def clean(x, y, cd):
    global cnt
    q.append((x, y, cd))
    #현재 위치를 청소한다
    chk[x][y] = 1

    cnt += 1
    cnt_dir = 0
    while(q):

        tmp = q.pop()
        nx = x + direction(tmp[2])[0]
        ny = y + direction(tmp[2])[1]
        ncd = direction(tmp[2])[2]
        #만약 현재위치 방형을 기준으로 왼쪽 방향 부터 탐색하는데
        if 0 <= nx < n and 0 <= ny < m:
            #a. 왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면
            if board[nx][ny]==0 and chk[nx][ny]==0:
                #그 방향으로 회전한 다음 한 칸 전진한다

                cnt_dir = 0
                x = nx
                y = ny
                q.append((nx, ny, ncd))
                chk[nx][ny]=1
                cnt += 1
            #b. 왼쪽 방향이 벽이라면 그 방향으로 회전하고 재탐색
            elif board[nx][ny]==1 or chk[nx][ny]==1:

                if cnt_dir != 4:
                    #그 방향으로 회전한고 재탐색

                    q.append((x, y, ncd))
                    cnt_dir += 1
                # c, d 네 방향 모두 청소가 되어 있거나 벽인 경우
                else:

                    cnt_dir = 0
                    #후진은 청소할 수 있는 곳이 나올 때 까지 후진한다
                    while(True):
                        bcd = current_direct(ncd)
                        bx = x + back(bcd)[0]
                        by = y + back(bcd)[1]

                        x = bx
                        y = by

                        if board[bx][by] == 0:
                            x = bx
                            y = by
                            q.append((bx, by, bcd))
                            break
                        if board[bx][by]==1:
                            return

if __name__ == "__main__":
    cnt = 0
    clean(r, c, d)
    print(cnt)